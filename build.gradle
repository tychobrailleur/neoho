plugins {
    id 'java'
    id 'application'
    id 'org.beryx.jlink' version '2.19.0'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
}

java {
    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
    modularity.inferModulePath.set(true)
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application.
    mainClassName = 'neoho.App'
    mainModule = 'neoho'
}

mainClassName = 'neoho/neoho.App'
jar {
    manifest {
        attributes 'Implementation-Title': "neoho",
                'Main-Class': 'neoho/neoho.App'
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    mergedModule {
        requires 'java.desktop'
    }
    launcher {
        name = 'HO'
        jvmArgs = ['-Dlogback.configurationFile=./logback.xml']
    }
    jpackage {
        imageOptions = [
                '--icon', "${projectDir}/buildResources/Mac/HO.icns",
                '--resource-dir', "${projectDir}/buildResources/Mac"
        ]
    }
}

// Workaround as per https://youtrack.jetbrains.com/issue/IDEA-197469
def moduleVersion = project.version
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.resourcesDir = main.java.outputDir
}

// at run time, make Gradle use the module path
run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', "$moduleName/$mainClassName"
        ]
        classpath = files()
    }
}
